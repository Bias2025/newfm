ROLE

Act as a Distinguished Engineer for Spring Boot microservices.
Apply Clean Code, TDD first, and DDD tactical patterns. Optimize for expert performance and solid security.
CONTEXT

Domain: Order Processing microservice
Scale: 1,000 concurrent users, 300 RPS sustained, P95 latency ≤ 120 ms, error rate ≤ 0.5%
Constraints: Cloud-native, containerized, single region; environment-only configuration; zero secrets in repo
Integrations: PostgreSQL 15+, Redis for cache, OpenAPI contract-first
REQUIREMENTS

Functional: CRUD for Orders; submit, fetch by id, list with pagination/sort; health and readiness endpoints
Non-functional: P95 ≤ 120 ms, P99 ≤ 300 ms; cold start ≤ 1.5 s; 99.9% uptime; structured logging; trace propagation
Security: OAuth2/JWT bearer auth; input validation; rate limit 200 RPS per client; no secrets in code
Observability: Metrics (Micrometer/Prometheus), traces (OpenTelemetry), JSON logs to stdout
ARCHITECTURE

Pattern: Clean/Hexagonal with application, domain, and infrastructure layers
Data flow: REST -> application services -> domain -> repositories; zero N+1 queries; caching at query layer
Packaging: single deployable service; 12‑Factor alignment using toggles below
FRAMEWORK

Language/Runtime: Java 17; Spring Boot 3.2.x
Web: spring-boot-starter-web; Validation: spring-boot-starter-validation
Data: Spring Data JPA (Hibernate) with PostgreSQL 15; Flyway migrations; Redis cache
Security: spring-boot-starter-oauth2-resource-server (JWT)
Build: Maven; Dockerfile; Container runs as non-root; port 8080
API: OpenAPI 3 via springdoc-openapi
TECHNOLOGY

Database: use PostgreSQL JSONB where appropriate; indexes for search fields; read-only transactions for queries
Caching: Redis with TTL and cache invalidation on writes
Resilience: timeouts, retries with backoff, circuit breaker
CI: run unit, integration (Testcontainers), and static analysis; build Docker image; push artifact
TESTING

TDD: JUnit 5 + Mockito unit tests; Testcontainers for PostgreSQL/Redis; 98%+ line coverage goal
Contract: OpenAPI validation tests
Performance: simple Gatling/JMeter scenario to confirm P95/P99 targets
12‑FACTOR TOGGLES (choose exactly two ACTIVE; others remain SWAPPABLE and should be scaffolded with comments/hooks)

Codebase: SWAPPABLE
Dependencies: SWAPPABLE
Config: ACTIVE
Implement externalized configuration via environment variables and profiles.
Bind secrets from env only. Provide sample application.yml reading env vars with safe defaults.
Document required env vars (DB_URL, DB_USER, DB_PASSWORD, REDIS_URL, JWT_ISSUER).
Backing services: SWAPPABLE
Build, release, run: SWAPPABLE
Processes: SWAPPABLE
Port binding: SWAPPABLE
Concurrency: SWAPPABLE
Disposability: SWAPPABLE
Dev/prod parity: SWAPPABLE
Logs: ACTIVE
Log to stdout only in JSON via Logback; include traceId/spanId and userId in MDC.
No file appenders. Provide log level via env LOG_LEVEL.
Admin processes: SWAPPABLE
DELIVERABLES

Generate a complete Spring Boot 3.2 project with:
REST endpoints, DTOs, entities, repositories, services, mappers
application.yml with env placeholders; example .env file
Logback configuration producing JSON to stdout with MDC and pattern for level/timestamp
Flyway V1__init.sql with schema and indexes; sample data disabled by default
OpenAPI doc and Swagger UI
Security config for JWT resource server with role-based method security
Dockerfile (distroless or alpine, non-root), and docker-compose for local Postgres/Redis
Unit and integration tests achieving ≥ 98% coverage
README explaining how to swap ACTIVE factors by editing the toggle list in this prompt
OUTPUT RULES

Return code and files only; keep explanations minimal.
Ensure zero hard-coded secrets; fail fast if required env vars missing.
Optimize SQL (no N+1), add indexes, and verify with tests.
Keep methods simple (cyclomatic complexity ≤ 5) and include helpful error messages.
SWAP INSTRUCTIONS

To interchange which 12‑Factor principles are implemented, change exactly two items from SWAPPABLE to ACTIVE in the toggle list above and re-run this prompt. For any factor turned ACTIVE, generate production-grade implementation plus tests; for those left SWAPPABLE, scaffold comments and interfaces only.
PROMPT END
